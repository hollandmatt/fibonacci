{"version":3,"sources":["components/NumberPicker.js","utils/Fibonacci.js","components/NumberSequence.js","App.js","index.js"],"names":["NumberPicker","_ref","onChange","count","react_default","a","createElement","className","type","value","event","Number","target","getNthFibonacciNumber","n","memo","arguments","length","undefined","NumberSequence","sequence","fibonacciNumbers","push","getFirstNFibonacciNumbers","map","number","index","key","App","_useState","useState","_useState2","Object","slicedToArray","setCount","src_components_NumberPicker","src_components_NumberSequence","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"kQAyBeA,eAjBM,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,SAAUC,EAAYF,EAAZE,MAChC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,SACLC,MAAON,EACPD,SAAU,SAAAQ,GAAK,OAAIR,EAASS,OAAOD,EAAME,OAAOH,cCmBlDI,EAAwB,SAAxBA,EAAyBC,GAAiB,IAAdC,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACvC,OAAU,IAANF,EAAgB,EACV,IAANA,EAAgB,EAEhBC,EAAKD,GAAWC,EAAKD,GAEjBC,EAAKD,GACXD,EAAsBC,EAAI,EAAGC,GAAQF,EAAsBC,EAAI,EAAGC,ICVvDI,SApBQ,SAAAlB,GAAe,IAAZE,EAAYF,EAAZE,MACxB,GAAc,IAAVA,EAAa,OAAO,KAExB,IAAMiB,EDD0B,SAAAN,GAIhC,IAHA,IAAMO,EAAmB,GAEnBN,EAAO,GACNM,EAAiBJ,OAASH,GAC/BO,EAAiBC,KAAKT,EAAsBQ,EAAiBJ,OAAQF,IAGvE,OAAOM,ECPUE,CAA0BpB,GAE3C,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZa,EAASI,IAAI,SAACC,EAAQC,GAAT,OACZtB,EAAAC,EAAAC,cAAA,OAAKqB,IAAKD,EAAOnB,UAAU,mBACxBkB,QCKIG,EAbH,WAAM,IAAAC,EACUC,mBAAS,GADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACT1B,EADS4B,EAAA,GACFG,EADEH,EAAA,GAEhB,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,kCACqBF,EAAAC,EAAAC,cAAA,mBADrB,uCAGAF,EAAAC,EAAAC,cAAC6B,EAAD,CAAcjC,SAAUgC,IACxB9B,EAAAC,EAAAC,cAAC8B,EAAD,CAAgBjC,MAAOA,MCd7BkC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.28649fe3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NumberPicker.css';\n\n/**\n * The NumberPicker component wraps an HTML number input.\n */\nconst NumberPicker = ({ onChange, count }) => {\n  return (\n    <div className=\"NumberPicker\">\n      <input\n        type=\"number\"\n        value={count}\n        onChange={event => onChange(Number(event.target.value))}\n      />\n    </div>\n  );\n};\n\nNumberPicker.propTypes = {\n  count: PropTypes.number,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default NumberPicker;\n","/**\n * Functions for the generation of the actual number sequnce live\n */\n\n/**\n * Generate an array with the first n entries in the Fibonacci sequence. Note that the same memoized\n * set is passed to the call for each individual number, meaning they do not have to be re-calculated.\n *\n * Complexity is O(n).\n *\n * @param {*} n How many numbers to generate\n */\nconst getFirstNFibonacciNumbers = n => {\n  const fibonacciNumbers = [];\n\n  const memo = {};\n  while (fibonacciNumbers.length < n) {\n    fibonacciNumbers.push(getNthFibonacciNumber(fibonacciNumbers.length, memo));\n  }\n\n  return fibonacciNumbers;\n};\n\n/**\n * Get the nth number in the Fibonacci sequence.\n *\n * We're memoizing numbers we have already calculated to reduce the complexity of the algorithm.\n *\n * Complexity is O(n).\n *\n * @param {*} n Which Fibonacci number to generate\n * @param {*} memo The memoized numbers\n */\nconst getNthFibonacciNumber = (n, memo = {}) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n\n  if (memo[n]) return memo[n];\n\n  return (memo[n] =\n    getNthFibonacciNumber(n - 1, memo) + getNthFibonacciNumber(n - 2, memo));\n};\n\nexport { getFirstNFibonacciNumbers, getNthFibonacciNumber };\n","import React from 'react';\nimport { getFirstNFibonacciNumbers } from '../utils/Fibonacci';\nimport PropTypes from 'prop-types';\n\nimport './NumberSequence.css';\n\n/**\n * This component will generate the actual number sequence, given a count of numbers to\n * generate.\n */\nconst NumberSequence = ({ count }) => {\n  if (count === 0) return null;\n\n  const sequence = getFirstNFibonacciNumbers(count);\n\n  return (\n    <div className=\"NumberSequence\">\n      {sequence.map((number, index) => (\n        <div key={index} className=\"FibonacciNumber\">\n          {number}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nNumberSequence.propTypes = {\n  count: PropTypes.number.isRequired\n};\n\nexport default NumberSequence;\n","import React, { useState } from 'react';\nimport './App.css';\nimport NumberPicker from './components/NumberPicker';\nimport NumberSequence from './components/NumberSequence';\n\n/**\n * The App component handles state management and generates the UI.\n *\n * We could use Redux here, but it's not necessary in an app of this size. We're using React\n * Hooks (useState specifically) instead of creating a class component in order to use state.\n */\nconst App = () => {\n  const [count, setCount] = useState(0);\n  return (\n    <div className=\"App\">\n      <span>\n        Generate the first <strong>n</strong> numbers in the Fibonacci sequence.\n      </span>\n      <NumberPicker onChange={setCount} />\n      <NumberSequence count={count} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}